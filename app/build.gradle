// All-Flip
// module build.gradle

plugins {
    id ("com.android.application")
    id ("org.jetbrains.kotlin.android") // Prevents duplicate kotlin warnings
}

android {
    compileSdk 35
    namespace 'com.landenlabs.all_flipanimation'

    defaultConfig {
        applicationId "com.landenlabs.all_flipanimation"
        minSdkVersion 23
        targetSdkVersion 35

        versionCode 20701
        versionName '2.06.28'

        // Limit languages to following list.
        resourceConfigurations += ['en', 'es']

        buildConfigField "long", "BuildTimeMilli", System.currentTimeMillis() + "L"
    }

    // Save app version in string so resource can be used in layouts
    applicationVariants.configureEach { variant ->
        variant.resValue "string", "versionName", "v" + variant.versionName
    }

    signingConfigs {
        release
    }

    // Load signing config (does not work for command line builds)
    // println("Setting release=${rootDir}/release.properties")
    if (file("${rootDir}/release.properties").exists()) {
        def props = new Properties()
        props.load(new FileInputStream(file("${rootDir}/release.properties")))
        android.signingConfigs.release.storeFile = file(props.keyStore)
        android.signingConfigs.release.storePassword = props.keyStorePassword
        android.signingConfigs.release.keyAlias = props.keyAlias
        android.signingConfigs.release.keyPassword = props.keyAliasPassword
        println("Setting release to " + signingConfigs.release.storeFile.absolutePath )
    }

    buildFeatures.buildConfig = true

    buildTypes {
        release {
            // Enables code shrinking, obfuscation, and optimization.
            minifyEnabled true

            // List of resources removed at end of generated mapping file:
            // grep unused ./app/build/outputs/mapping/demoRelease/resources.txt
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            ndk {
                // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                // Enable verbose lint reporting during build.
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }

    /*
    compileOptions {
        // https://developer.android.com/studio/write/java8-support
        // isCoreLibraryDesugaringEnabled = true
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
     */

    lint {
        abortOnError false
        disable 'DefaultLocale', 'SimpleDateFormat', 'InflateParams', 'SpUsage', 'UseCompoundDrawables', 'HandlerLeak', 'ViewConstructor', 'SetTextI18n', 'RtlSymmetry', 'RtlHardcoded', 'ContentDescription', 'MissingTranslation', 'ValidFragment', 'UnusedAttribute'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.0'
}

// Rename app
android.applicationVariants.configureEach { variant ->
    variant.outputs.configureEach {
        def ourname = project.parent.name
        outputFileName = "$ourname-${variant.name}-${variant.versionName}.apk"
        println "out name= $outputFileName"
    }
}

tasks.register('listFlavors') {
    description = 'List Flip flavors'
    doLast {
        println("--- Flip Flavors ---")
        /*
        android.productFlavors.all {
            flavor -> println("  " + flavor.name + "\t" + android.defaultConfig.applicationId + flavor.applicationIdSuffix)
        }
         */
        printf("   %-20s %-20s %-40s   %s\n", "--Package--", "--Name--", "--Description/Flavor--", "--isMinified--")
        project.android.applicationVariants.all { variant ->
            // def applicationId = [variant.mergedFlavor.applicationId, variant.buildType.applicationIdSuffix].findAll().join()
            printf("   %-20s %-20s %-40s   %b\n", variant.getApplicationId(), variant.name, variant.description, variant.buildType.isMinifyEnabled())
        }
    }
}

tasks.register('listrepos') {
    description = 'List auto repositories'
    doLast {
        println "Flip Repositories:"
        project.repositories.each { printf("  %15s %s\n", it.name, it.url) }
    }
}
