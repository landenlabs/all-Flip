plugins {
    id ("com.android.application")
    // Prevents duplicate kotlin warnings
    id ("org.jetbrains.kotlin.android")
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "com.landenlabs.all_flipanimation"
        minSdkVersion 23
        targetSdkVersion 34

        versionCode 20627
        versionName '2.06.27'
        resourceConfigurations += ['en', 'es']

        // Limit languages to following list.

        ndk {
            // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

        buildConfigField "long", "BuildTimeMilli", System.currentTimeMillis() + "L"
    }

    signingConfigs {
        release {
            // See all-sensor for correct way to hide and manage sign passwords.
            storeFile file('/Users/ldennis/Dropbox/android/keystores/flip.jks')
            storePassword 'Salem2nh-k'
            keyAlias 'flip'
            keyPassword 'Salem2nh-f'
        }
    }

    buildTypes {
        release {
            // Enables code shrinking, obfuscation, and optimization.
            minifyEnabled true

            // List of resources removed at end of generated mapping file:
            // grep unused ./app/build/outputs/mapping/demoRelease/resources.txt
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
    }

    // Save app version in string so resource can be used in layouts
    applicationVariants.configureEach { variant ->
        variant.resValue "string", "versionName", "v" + variant.versionName
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile).tap {
            configureEach {
                // Enable verbose lint reporting during build.
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }

    /*
    compileOptions {
        // https://developer.android.com/studio/write/java8-support
        // isCoreLibraryDesugaringEnabled = true
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
     */

    namespace 'com.landenlabs.all_flipanimation'
    lint {
        abortOnError false
        disable 'DefaultLocale', 'SimpleDateFormat', 'InflateParams', 'SpUsage', 'UseCompoundDrawables', 'HandlerLeak', 'ViewConstructor', 'SetTextI18n', 'RtlSymmetry', 'RtlHardcoded', 'ContentDescription', 'MissingTranslation', 'ValidFragment', 'UnusedAttribute'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.0'
}

// Rename app
android.applicationVariants.configureEach { variant ->
    variant.outputs.configureEach {
        def ourname = project.parent.name
        outputFileName = "$ourname-${variant.name}-${variant.versionName}.apk"
        println "out name= $outputFileName"
    }
}

// Rename app
//  {project}-{flavor}-{buildType}.apk -> {parentProject}-{versionNameSuffix}-{buildType}-{versionStr}.apk
//  Ex:
//           app-release.apk -> flip-release-1.02.3456.apk
//           app-release.aab -> flip-release-1.4.27.aab
android.applicationVariants.configureEach {
    variant -> variant.outputs.configureEach {
        def ourname = project.parent.name
        def buildType = outputFileName.replaceAll(".*(debug|release).*", '$1')
        def versionStr = versionName.replaceAll("-.*", "")
        def flavor = variant.mergedFlavor.versionNameSuffix.toString().replace("null", "")
        // ext.flavorName = variant.name
        def newNameRoot = "${ourname}${flavor}-${buildType}-${versionStr}"
        outputFileName = "${newNameRoot}.apk"

        // sign{flavor}{buildType}Bundle
        //   Ex: signAppDebugBundle
        def bundleFinalizeTaskName = "sign${variant.name.capitalize()}Bundle"
        tasks.named(bundleFinalizeTaskName) {
            def file = finalBundleFile.asFile.get()
            def finalFile = new File(file.parentFile, "${newNameRoot}.aab")
            finalBundleFile.set(finalFile)
        }
    }
}

tasks.register('listFlavors') {
    description = 'List Flip flavors'
    doLast {
        println("--- Flip Flavors ---")
        /*
        android.productFlavors.all {
            flavor -> println("  " + flavor.name + "\t" + android.defaultConfig.applicationId + flavor.applicationIdSuffix)
        }
         */
        printf("   %-20s %-20s %-40s   %s\n", "--Package--", "--Name--", "--Description/Flavor--", "--isMinified--")
        project.android.applicationVariants.all { variant ->
            // def applicationId = [variant.mergedFlavor.applicationId, variant.buildType.applicationIdSuffix].findAll().join()
            printf("   %-20s %-20s %-40s   %b\n", variant.getApplicationId(), variant.name, variant.description, variant.buildType.isMinifyEnabled())
        }
    }
}

tasks.register('listrepos') {
    description = 'List auto repositories'
    doLast {
        println "Flip Repositories:"
        project.repositories.each { printf("  %15s %s\n", it.name, it.url) }
    }
}
